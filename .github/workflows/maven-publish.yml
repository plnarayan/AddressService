# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: AddressBook

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
       # server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
       # settings-path: ${{ github.workspace }} # location for the settings.xml file

      # Step 3: Build the project with Maven (skip tests)
    - name: Build with Maven
      run: mvn -f ./pom.xml clean install -DskipTests

    - name: Set up Git
      run: |
        git config --global user.name '${{ secrets.MY_USER_NAME }}'
        git config --global user.email '${{ secrets.MY_EMIAL }}'
        echo name : ${{ secrets.MY_USER_NAME }}

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install semantic release
      run: npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github

    - name: Run semantic release
      env:
        GITHUB_TOKEN: 33bf4080ab5589381b3dd7e973389b26233b65e3
      run: semantic-release
    - name: List files in the repository
      run: ls -R ./target

  #  - name: Get release version
  #    id: get_version
   #   run: |
    #    VERSION=$(npx semantic-release --dry-run | grep -oP '(?<=nextRelease: ).*')
     #   echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

    - name: Rename .jar file
      run: |
        VERSION=$(semantic-release --dry-run | grep "nextRelease:" | awk '{print $2}')
        echo " Version is "= $(semantic-release --dry-run)
        mv ./target/AddressService-0.0.1-SNAPSHOT.jar ./target/AddressService-$VERSION .jar

    - name: List files in the repository
      run: ls -R ./target
  
 # Step 7: Upload the versioned JAR file as an artifact
 #   - name: Upload JAR file
  #    uses: actions/upload-artifact@v4
   ##    name: custom-token-provider-${{ env.VERSION }}
     #   path: ./java/custom-token-provider/target/CustomTokenProvider-${{ env.VERSION }}.jar
    


   # - name: Publish to GitHub Packages Apache Maven
   #   run: mvn deploy -s $GITHUB_WORKSPACE/settings.xml
   #   env:
   #     GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}

  #  - name: Publish to GitHub Packages Apache Maven
   #   run: mvn deploy -s $GITHUB_WORKSPACE/settings.xml
    #  env:
     #   GITHUB_TOKEN: ${{ github.token }}
